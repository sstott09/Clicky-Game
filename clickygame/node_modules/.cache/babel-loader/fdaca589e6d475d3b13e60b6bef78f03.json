{"ast":null,"code":"var _jsxFileName = \"/Users/stevenstott/DU/Code_Boot_Camp/Homework/Clicky-Game/clickygame/src/components/Game.js\";\nimport React, { Component } from \"react\";\nimport ImgCard from './ImgCard';\nimport Nav from './Nav';\nimport data from '../data.json';\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data,\n      score: 0,\n      topScore: 0\n    };\n\n    this.shuffleCards = data => {\n      let i = data.length - 1;\n\n      while (i > 0) {\n        const randomNum = Math.floor(Math.random() * data.length);\n        const temp = data[i];\n        data[i] = data[randomNum];\n        data[randomNum] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    this.handleClick = id => {\n      let guessedCorrectly = false;\n      const newImageCards = this.state.data.map(image => {\n        const newImage = { ...image\n        };\n\n        if (newImage.id === id) {\n          if (!newImage.clicked) {\n            newImage.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newImage;\n      });\n      guessedCorrectly ? this.correctGuess(newImageCards) : this.incorrectGuess(newImageCards);\n    };\n\n    this.correctGuess = data => {\n      console.log(\"correct guess\");\n      const newScore = this.state.score + 1;\n      const newTopScore = Math.max(newScore, this.state.topScore);\n      this.setState({\n        score: newScore,\n        topScore: newTopScore,\n        data: this.shuffleCards(data)\n      });\n    };\n\n    this.incorrectGuess = data => {\n      console.log(\"incor\");\n      this.setState({\n        data: this.resetData(data),\n        score: 0\n      });\n    };\n\n    this.resetData = data => {\n      const resetData = data.map(item => ({ ...item,\n        clicked: false\n      }));\n      return this.shuffleCards(resetData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.shuffleCards(this.state.data)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.data.map(image => React.createElement(ImgCard, {\n      key: image.id,\n      id: image.id,\n      image: image.image,\n      handleImageClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/stevenstott/DU/Code_Boot_Camp/Homework/Clicky-Game/clickygame/src/components/Game.js"],"names":["React","Component","ImgCard","Nav","data","Game","state","score","topScore","shuffleCards","i","length","randomNum","Math","floor","random","temp","handleClick","id","guessedCorrectly","newImageCards","map","image","newImage","clicked","correctGuess","incorrectGuess","console","log","newScore","newTopScore","max","setState","resetData","item","componentDidMount","render"],"mappings":"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","sourcesContent":["import React,{ Component } from  \"react\";\nimport ImgCard from './ImgCard';\nimport Nav from './Nav';\nimport data from '../data.json';\n\nclass Game extends Component{\n    state ={\n        data,\n        score: 0,\n        topScore: 0\n    }\n    componentDidMount(){\n        this.setState({\n            data: this.shuffleCards(this.state.data)\n        })\n    }\n    shuffleCards = (data) => {\n        let i = data.length-1;\n        while(i>0){\n            const randomNum = Math.floor(Math.random()* (data.length))\n            const temp = data[i];\n            data[i] = data[randomNum];\n            data[randomNum] = temp;\n            i--;\n        }\n        return data;\n    }\n    handleClick = (id) => {\n        let guessedCorrectly = false;\n        const newImageCards = this.state.data.map((image) => {\n            const newImage = {...image}\n            if(newImage.id === id){\n                if(!newImage.clicked){\n                    newImage.clicked= true;\n                    guessedCorrectly = true;\n                }\n            }\n            return newImage\n        });\n        guessedCorrectly ? this.correctGuess(newImageCards) : this.incorrectGuess(newImageCards)\n    }\n    correctGuess = (data) => {\n        console.log(\"correct guess\")\n        const newScore = this.state.score + 1;\n        const newTopScore = Math.max(newScore, this.state.topScore);\n        this.setState({\n            score: newScore,\n            topScore: newTopScore,\n            data: this.shuffleCards(data)\n        })\n\n    }\n    incorrectGuess = (data) => {\n        console.log(\"incor\")\n        this.setState({\n            data: this.resetData(data),\n            score: 0\n        })\n    }\n    resetData = data => {\n        const resetData = data.map(item => ({\n            ...item, clicked: false\n        }))\n        return this.shuffleCards(resetData)\n    }\n    render(){\n        return(\n            <div>\n                    <Nav score={this.state.score} topScore = {this.state.topScore} />\n                    <div>\n                        {this.state.data.map(image => (\n                            <ImgCard \n                                key= {image.id}\n                                id= {image.id}\n                                image= {image.image}\n                                handleImageClick= {this.handleClick}\n                            />\n                        ))}\n                    </div>\n            </div>\n            \n           \n        )\n    }\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}