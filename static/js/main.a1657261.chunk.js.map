{"version":3,"sources":["components/ImgCard.js","components/Nav.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","Container","Row","sm","Col","className","src","image","alt","onClick","handleImageClick","id","Nav","score","topScore","Game","state","data","shuffleCards","i","length","randomNum","Math","floor","random","temp","handleClick","guessedCorrectly","newImageCards","map","newImage","clicked","correctGuess","incorrectGuess","console","log","newScore","newTopScore","max","setState","resetData","item","this","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w+DAgBeA,MAZf,SAAiBC,GACb,OACI,kBAACC,EAAA,EAAD,KACF,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACI,yBAAKC,UAAU,cAAcC,IAAMN,EAAMO,MAAOC,IAAI,YAAYC,QAAS,kBAAKT,EAAMU,iBAAiBV,EAAMW,WCKxGC,MAXf,SAAaZ,GACT,OACI,yBAAKK,UAAU,UACX,4BACI,wBAAIA,UAAU,SAAd,eAEA,sCAAYL,EAAMa,MAAlB,gBAAsCb,EAAMc,a,QC4E7CC,E,2MA/EXC,MAAO,CACHC,OACAJ,MAAO,EACPC,SAAU,G,EAOdI,aAAe,SAACD,GAEZ,IADA,IAAIE,EAAIF,EAAKG,OAAO,EACdD,EAAE,GAAE,CACN,IAAME,EAAYC,KAAKC,MAAMD,KAAKE,SAAWP,EAAKG,QAC5CK,EAAOR,EAAKE,GAClBF,EAAKE,GAAKF,EAAKI,GACfJ,EAAKI,GAAaI,EAClBN,IAEJ,OAAOF,G,EAEXS,YAAc,SAACf,GACX,IAAIgB,GAAmB,EACjBC,EAAgB,EAAKZ,MAAMC,KAAKY,KAAI,SAACtB,GACvC,IAAMuB,EAAQ,eAAOvB,GAOrB,OANGuB,EAASnB,KAAOA,IACXmB,EAASC,UACTD,EAASC,SAAS,EAClBJ,GAAmB,IAGpBG,KAEXH,EAAmB,EAAKK,aAAaJ,GAAiB,EAAKK,eAAeL,I,EAE9EI,aAAe,SAACf,GACZiB,QAAQC,IAAI,iBACZ,IAAMC,EAAW,EAAKpB,MAAMH,MAAQ,EAC9BwB,EAAcf,KAAKgB,IAAIF,EAAU,EAAKpB,MAAMF,UAClD,EAAKyB,SAAS,CACV1B,MAAOuB,EACPtB,SAAUuB,EACVpB,KAAM,EAAKC,aAAaD,M,EAIhCgB,eAAiB,SAAChB,GACdiB,QAAQC,IAAI,mBACZ,EAAKI,SAAS,CACVtB,KAAM,EAAKuB,UAAUvB,GACrBJ,MAAO,K,EAGf2B,UAAY,SAAAvB,GACR,IAAMuB,EAAYvB,EAAKY,KAAI,SAAAY,GAAI,sBACxBA,EADwB,CAClBV,SAAS,OAEtB,OAAO,EAAKb,aAAasB,I,mFAnDzBE,KAAKH,SAAS,CACVtB,KAAMyB,KAAKxB,aAAawB,KAAK1B,MAAMC,U,+BAoDlC,IAAD,OACJ,OACI,6BACQ,kBAAC,EAAD,CAAKJ,MAAO6B,KAAK1B,MAAMH,MAAOC,SAAY4B,KAAK1B,MAAMF,WACrD,6BACK4B,KAAK1B,MAAMC,KAAKY,KAAI,SAAAtB,GAAK,OACtB,kBAAC,EAAD,CACIoC,IAAMpC,EAAMI,GACZA,GAAKJ,EAAMI,GACXJ,MAAQA,EAAMA,MACdG,iBAAmB,EAAKgB,uB,GAtErCkB,aCQJC,MATf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.a1657261.chunk.js","sourcesContent":["import React from  \"react\";\nimport { Container, Row, Col } from 'reactstrap';\nimport \"./style.css\"\n\nfunction ImgCard(props){\n    return(\n        <Container>\n      <Row sm=\"2\">\n        <Col>      \n            <img className=\"image-cards\" src ={props.image} alt=\"imageCard\" onClick={()=> props.handleImageClick(props.id)}></img>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default ImgCard;","import React from  \"react\";\nimport \"./style.css\"\n\nfunction Nav(props){\n    return(\n        <nav className=\"navbar\">\n            <ul>\n                <h1 className=\"brand\">Clicky Game</h1>\n\n                <li>Score: {props.score} | TopScore: {props.topScore}</li>\n            </ul>\n        </nav>\n    )\n}\nexport default Nav;","import React,{ Component } from  \"react\";\nimport ImgCard from './ImgCard';\nimport Nav from './Nav';\nimport data from '../data.json';\n\nclass Game extends Component{\n    state ={\n        data,\n        score: 0,\n        topScore: 0\n    }\n    componentDidMount(){\n        this.setState({\n            data: this.shuffleCards(this.state.data)\n        })\n    }\n    shuffleCards = (data) => {\n        let i = data.length-1;\n        while(i>0){\n            const randomNum = Math.floor(Math.random()* (data.length))\n            const temp = data[i];\n            data[i] = data[randomNum];\n            data[randomNum] = temp;\n            i--;\n        }\n        return data;\n    }\n    handleClick = (id) => {\n        let guessedCorrectly = false;\n        const newImageCards = this.state.data.map((image) => {\n            const newImage = {...image}\n            if(newImage.id === id){\n                if(!newImage.clicked){\n                    newImage.clicked= true;\n                    guessedCorrectly = true;\n                }\n            }\n            return newImage\n        });\n        guessedCorrectly ? this.correctGuess(newImageCards) : this.incorrectGuess(newImageCards)\n    }\n    correctGuess = (data) => {\n        console.log(\"correct guess\")\n        const newScore = this.state.score + 1;\n        const newTopScore = Math.max(newScore, this.state.topScore);\n        this.setState({\n            score: newScore,\n            topScore: newTopScore,\n            data: this.shuffleCards(data)\n        })\n\n    }\n    incorrectGuess = (data) => {\n        console.log(\"incorrect guess\")\n        this.setState({\n            data: this.resetData(data),\n            score: 0\n        })\n    }\n    resetData = data => {\n        const resetData = data.map(item => ({\n            ...item, clicked: false\n        }))\n        return this.shuffleCards(resetData)\n    }\n    render(){\n        return(\n            <div>\n                    <Nav score={this.state.score} topScore = {this.state.topScore} />\n                    <div>\n                        {this.state.data.map(image => (\n                            <ImgCard \n                                key= {image.id}\n                                id= {image.id}\n                                image= {image.image}\n                                handleImageClick= {this.handleClick}\n                            />\n                        ))}\n                    </div>\n            </div>\n            \n           \n        )\n    }\n}\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}